// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/service.proto

/*
	Package products is a generated protocol buffer package.

	It is generated from these files:
		pb/service.proto

	It has these top-level messages:
		Item
		User
		LoginRes
		ProductReq
		ProductRes
*/
package products

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Item struct {
	ID          []byte                     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" bson:"_id"`
	IdCat       int32                      `protobuf:"varint,2,opt,name=IdCat,proto3" json:"IdCat,omitempty"`
	CusName     string                     `protobuf:"bytes,3,opt,name=CusName,proto3" json:"CusName,omitempty"`
	Model       string                     `protobuf:"bytes,4,opt,name=Model,proto3" json:"Model,omitempty"`
	Note        string                     `protobuf:"bytes,5,opt,name=Note,proto3" json:"Note,omitempty"`
	Address     string                     `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	Mobile      string                     `protobuf:"bytes,7,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	Status      int32                      `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`
	Adder       string                     `protobuf:"bytes,9,opt,name=Adder,proto3" json:"Adder,omitempty"`
	Executor    string                     `protobuf:"bytes,10,opt,name=Executor,proto3" json:"Executor,omitempty"`
	CreatedDate *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=CreatedDate" json:"CreatedDate,omitempty"`
	ActionDate  *google_protobuf.Timestamp `protobuf:"bytes,12,opt,name=ActionDate" json:"ActionDate,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *Item) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Item) GetIdCat() int32 {
	if m != nil {
		return m.IdCat
	}
	return 0
}

func (m *Item) GetCusName() string {
	if m != nil {
		return m.CusName
	}
	return ""
}

func (m *Item) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Item) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Item) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Item) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *Item) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Item) GetAdder() string {
	if m != nil {
		return m.Adder
	}
	return ""
}

func (m *Item) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *Item) GetCreatedDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedDate
	}
	return nil
}

func (m *Item) GetActionDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ActionDate
	}
	return nil
}

type User struct {
	ID          []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty" bson:"_id"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Pass        string `protobuf:"bytes,3,opt,name=Pass,proto3" json:"Pass,omitempty"`
	Role        int32  `protobuf:"varint,4,opt,name=Role,proto3" json:"Role,omitempty"`
	CreatedDate string `protobuf:"bytes,5,opt,name=CreatedDate,proto3" json:"CreatedDate,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *User) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *User) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *User) GetCreatedDate() string {
	if m != nil {
		return m.CreatedDate
	}
	return ""
}

type LoginRes struct {
	ErrCode  int32 `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	UserInfo *User `protobuf:"bytes,2,opt,name=UserInfo" json:"UserInfo,omitempty"`
}

func (m *LoginRes) Reset()                    { *m = LoginRes{} }
func (m *LoginRes) String() string            { return proto.CompactTextString(m) }
func (*LoginRes) ProtoMessage()               {}
func (*LoginRes) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *LoginRes) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *LoginRes) GetUserInfo() *User {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type ProductReq struct {
	IdCat  int32 `protobuf:"varint,1,opt,name=IdCat,proto3" json:"IdCat,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset int32 `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (m *ProductReq) Reset()                    { *m = ProductReq{} }
func (m *ProductReq) String() string            { return proto.CompactTextString(m) }
func (*ProductReq) ProtoMessage()               {}
func (*ProductReq) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *ProductReq) GetIdCat() int32 {
	if m != nil {
		return m.IdCat
	}
	return 0
}

func (m *ProductReq) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ProductReq) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ProductRes struct {
	ErrCode int32   `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	Items   []*Item `protobuf:"bytes,2,rep,name=Items" json:"Items,omitempty"`
}

func (m *ProductRes) Reset()                    { *m = ProductRes{} }
func (m *ProductRes) String() string            { return proto.CompactTextString(m) }
func (*ProductRes) ProtoMessage()               {}
func (*ProductRes) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func (m *ProductRes) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ProductRes) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Item)(nil), "products.Item")
	proto.RegisterType((*User)(nil), "products.User")
	proto.RegisterType((*LoginRes)(nil), "products.LoginRes")
	proto.RegisterType((*ProductReq)(nil), "products.ProductReq")
	proto.RegisterType((*ProductRes)(nil), "products.ProductRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProductService service

type ProductServiceClient interface {
	GetProducts(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductRes, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProducts(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductRes, error) {
	out := new(ProductRes)
	err := grpc.Invoke(ctx, "/products.ProductService/GetProducts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceServer interface {
	GetProducts(context.Context, *ProductReq) (*ProductRes, error)
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.ProductService/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProducts(ctx, req.(*ProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "products.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProductService_GetProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}

// Client API for UserService service

type UserServiceClient interface {
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginRes, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := grpc.Invoke(ctx, "/products.UserService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Login(context.Context, *User) (*LoginRes, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/products.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "products.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.IdCat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.IdCat))
	}
	if len(m.CusName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.CusName)))
		i += copy(dAtA[i:], m.CusName)
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status))
	}
	if len(m.Adder) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Adder)))
		i += copy(dAtA[i:], m.Adder)
	}
	if len(m.Executor) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Executor)))
		i += copy(dAtA[i:], m.Executor)
	}
	if m.CreatedDate != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintService(dAtA, i, uint64(m.CreatedDate.Size()))
		n1, err := m.CreatedDate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ActionDate != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ActionDate.Size()))
		n2, err := m.ActionDate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Pass) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Pass)))
		i += copy(dAtA[i:], m.Pass)
	}
	if m.Role != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Role))
	}
	if len(m.CreatedDate) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.CreatedDate)))
		i += copy(dAtA[i:], m.CreatedDate)
	}
	return i, nil
}

func (m *LoginRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ErrCode))
	}
	if m.UserInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.UserInfo.Size()))
		n3, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ProductReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdCat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.IdCat))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *ProductRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductRes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ErrCode))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Item) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.IdCat != 0 {
		n += 1 + sovService(uint64(m.IdCat))
	}
	l = len(m.CusName)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovService(uint64(m.Status))
	}
	l = len(m.Adder)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.CreatedDate != nil {
		l = m.CreatedDate.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ActionDate != nil {
		l = m.ActionDate.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Pass)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovService(uint64(m.Role))
	}
	l = len(m.CreatedDate)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *LoginRes) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovService(uint64(m.ErrCode))
	}
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ProductReq) Size() (n int) {
	var l int
	_ = l
	if m.IdCat != 0 {
		n += 1 + sovService(uint64(m.IdCat))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovService(uint64(m.Offset))
	}
	return n
}

func (m *ProductRes) Size() (n int) {
	var l int
	_ = l
	if m.ErrCode != 0 {
		n += 1 + sovService(uint64(m.ErrCode))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCat", wireType)
			}
			m.IdCat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdCat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CusName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CusName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedDate == nil {
				m.CreatedDate = &google_protobuf.Timestamp{}
			}
			if err := m.CreatedDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionDate == nil {
				m.ActionDate = &google_protobuf.Timestamp{}
			}
			if err := m.ActionDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &User{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCat", wireType)
			}
			m.IdCat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdCat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pb/service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x6a, 0x13, 0x4f,
	0x14, 0xfe, 0x6d, 0x9a, 0x6d, 0xd3, 0x93, 0x52, 0xca, 0x50, 0x7e, 0x8c, 0x51, 0xd2, 0xb8, 0x78,
	0x11, 0x8a, 0xee, 0x40, 0xbc, 0xf3, 0xca, 0x26, 0x2d, 0x12, 0x68, 0x6b, 0x98, 0xea, 0xa5, 0xc8,
	0x26, 0x3b, 0xd9, 0x2e, 0x64, 0x77, 0xe2, 0xce, 0xac, 0x08, 0x21, 0x08, 0xc5, 0x07, 0x10, 0x7c,
	0xa9, 0x5e, 0x0a, 0xde, 0x17, 0xa9, 0x3e, 0x81, 0x4f, 0x20, 0x73, 0x66, 0xb7, 0x9b, 0x8a, 0xa8,
	0x77, 0xf3, 0x7d, 0xe7, 0xec, 0xf9, 0xf3, 0x9d, 0x6f, 0x61, 0x67, 0x3e, 0x66, 0x4a, 0x64, 0x6f,
	0xe3, 0x89, 0xf0, 0xe7, 0x99, 0xd4, 0x92, 0x34, 0xe6, 0x99, 0x0c, 0xf3, 0x89, 0x56, 0xad, 0xbd,
	0x48, 0xca, 0x68, 0x26, 0x18, 0xf2, 0xe3, 0x7c, 0xca, 0x74, 0x9c, 0x08, 0xa5, 0x83, 0x64, 0x6e,
	0x53, 0x5b, 0x8f, 0xa2, 0x58, 0x9f, 0xe7, 0x63, 0x7f, 0x22, 0x13, 0x16, 0xc9, 0x48, 0x56, 0x99,
	0x06, 0x21, 0xc0, 0x57, 0x91, 0x7e, 0xaf, 0xa8, 0x17, 0xcc, 0x63, 0x16, 0xa4, 0xa9, 0xd4, 0x81,
	0x8e, 0x65, 0xaa, 0x6c, 0xd4, 0xbb, 0x58, 0x83, 0xfa, 0x50, 0x8b, 0x84, 0xb4, 0xa1, 0x36, 0x3c,
	0xa4, 0x4e, 0xc7, 0xe9, 0x6e, 0xf5, 0xb7, 0x7f, 0x5c, 0xed, 0xc1, 0x58, 0xc9, 0xf4, 0x89, 0xf7,
	0x3a, 0x0e, 0x3d, 0x5e, 0x1b, 0x1e, 0x92, 0x5d, 0x70, 0x87, 0xe1, 0x20, 0xd0, 0xb4, 0xd6, 0x71,
	0xba, 0x2e, 0xb7, 0x80, 0x50, 0xd8, 0x18, 0xe4, 0xea, 0x34, 0x48, 0x04, 0x5d, 0xeb, 0x38, 0xdd,
	0x4d, 0x5e, 0x42, 0x93, 0x7f, 0x22, 0x43, 0x31, 0xa3, 0x75, 0xe4, 0x2d, 0x20, 0x04, 0xea, 0xa7,
	0x52, 0x0b, 0xea, 0x22, 0x89, 0x6f, 0x53, 0xe3, 0x20, 0x0c, 0x33, 0xa1, 0x14, 0x5d, 0xb7, 0x35,
	0x0a, 0x48, 0xfe, 0x87, 0xf5, 0x13, 0x39, 0x8e, 0x67, 0x82, 0x6e, 0x60, 0xa0, 0x40, 0x86, 0x3f,
	0xd3, 0x81, 0xce, 0x15, 0x6d, 0xe0, 0x30, 0x05, 0x32, 0x3d, 0x0f, 0xc2, 0x50, 0x64, 0x74, 0xd3,
	0xf6, 0x44, 0x40, 0x5a, 0xd0, 0x38, 0x7a, 0x27, 0x26, 0xb9, 0x96, 0x19, 0x05, 0x0c, 0xdc, 0x60,
	0xd2, 0x87, 0xe6, 0x20, 0x13, 0x81, 0x16, 0xe1, 0x61, 0xa0, 0x05, 0x6d, 0x76, 0x9c, 0x6e, 0xb3,
	0xd7, 0xf2, 0xad, 0x64, 0x7e, 0x29, 0xac, 0xff, 0xa2, 0x3c, 0x41, 0xbf, 0x7e, 0x79, 0xb5, 0xe7,
	0xf0, 0xd5, 0x8f, 0xc8, 0x53, 0x80, 0x83, 0x89, 0xd1, 0x14, 0x4b, 0x6c, 0xfd, 0x63, 0x89, 0x95,
	0x6f, 0xbc, 0x0f, 0x0e, 0xd4, 0x5f, 0x2a, 0x91, 0xfd, 0xf5, 0x08, 0x46, 0x3e, 0xa3, 0x75, 0xad,
	0x90, 0xcf, 0x08, 0x4d, 0xa0, 0x3e, 0x0a, 0x94, 0x2a, 0xf4, 0xc7, 0xb7, 0xe1, 0xb8, 0x9c, 0x09,
	0xd4, 0xde, 0xe5, 0xf8, 0x26, 0x9d, 0xdb, 0xab, 0xda, 0x0b, 0xac, 0x52, 0xde, 0x08, 0x1a, 0xc7,
	0x32, 0x8a, 0x53, 0x2e, 0x94, 0x39, 0xca, 0x51, 0x96, 0x0d, 0x64, 0x28, 0x70, 0x1c, 0x97, 0x97,
	0x90, 0xec, 0x43, 0xc3, 0xcc, 0x3a, 0x4c, 0xa7, 0x12, 0xe7, 0x68, 0xf6, 0xb6, 0xfd, 0xd2, 0xbc,
	0xbe, 0x89, 0xf0, 0x9b, 0xb8, 0x37, 0x02, 0x18, 0xd9, 0x10, 0x17, 0x6f, 0x2a, 0x0b, 0x39, 0xab,
	0x16, 0xda, 0x05, 0xf7, 0x38, 0x4e, 0xe2, 0x1b, 0x63, 0x21, 0x30, 0x27, 0x7e, 0x3e, 0x9d, 0x2a,
	0xa1, 0x71, 0x2f, 0x97, 0x17, 0xc8, 0x3b, 0x5e, 0xa9, 0xf8, 0xa7, 0x29, 0x1f, 0x80, 0x6b, 0x6c,
	0xad, 0x68, 0xad, 0xb3, 0x76, 0x7b, 0x44, 0x43, 0x73, 0x1b, 0xec, 0xbd, 0x87, 0xed, 0xa2, 0xda,
	0x99, 0xfd, 0x1b, 0x49, 0x02, 0xcd, 0x67, 0x42, 0x17, 0xa4, 0x22, 0xbb, 0xd5, 0x77, 0xd5, 0x22,
	0xad, 0xdf, 0xb1, 0xca, 0xeb, 0x5d, 0x7c, 0xf9, 0xfe, 0xa9, 0xf6, 0xd0, 0xdb, 0x67, 0x41, 0xae,
	0xcf, 0x59, 0x54, 0x95, 0x61, 0x0b, 0x5c, 0x75, 0xc9, 0x16, 0xb8, 0xdc, 0x92, 0x2d, 0xec, 0x36,
	0xcb, 0xde, 0x2b, 0x68, 0x1a, 0xb1, 0xca, 0xee, 0xa7, 0xe0, 0xe2, 0x05, 0xc8, 0x2f, 0x92, 0xb6,
	0x48, 0x85, 0xcb, 0x13, 0x79, 0xf7, 0xb1, 0xdf, 0x5d, 0xef, 0x8e, 0xed, 0x87, 0x3c, 0x5b, 0x18,
	0x4f, 0x2c, 0xd9, 0xc2, 0xd8, 0x60, 0xd9, 0xdf, 0xb9, 0xbc, 0x6e, 0x3b, 0x9f, 0xaf, 0xdb, 0xce,
	0xd7, 0xeb, 0xb6, 0xf3, 0xf1, 0x5b, 0xfb, 0xbf, 0xf1, 0x3a, 0x1a, 0xf2, 0xf1, 0xcf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x61, 0xee, 0x7e, 0x15, 0x82, 0x04, 0x00, 0x00,
}
